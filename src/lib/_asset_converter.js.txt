
(async function() {




	const beautify = (text) => window.js_beautify(text, {


		// "indent_size": 4,
		// "indent_char": " ",

		'eol': '\n',
		'indent_level': 0,
		'indent_with_tabs': true,
		'preserve_newlines': false,
		'max_preserve_newlines': 0,
		'jslint_happy': false,
		'space_after_anon_function': false,
		'brace_style': 'collapse',
		'keep_array_indentation': false,
		'keep_function_indentation': false,
		'space_before_conditional': true,
		'break_chained_methods': false,
		'eval_code': false,
		'unescape_strings': false,
		'wrap_line_length': 0,
		'wrap_attributes': 'auto',
		'wrap_attributes_indent_size': 4,
		'end_with_newline': true


	});


	console.clear();

	const NAME = 'S_JSON';

	const { model } = await feeles.connected;



	const files = model.files.filter((file) => file.name.startsWith('snippets'));


	for (const file of files) {


		const a = await feeles.fetch(file.name);
		const b = await a.text();

		eval(`window.${NAME} = ${b}`);

		const json = window[NAME];


		for (const [, v] of Object.entries(json['.source.js'])) {

			const body = v.body;

			const b = beautify(body);

			if (!b.startsWith('Assets')) continue;





			const name = b.split('(')[0].split('.')[1];

			//console.log(name);



			if (name === 'get') continue;



			const lines = b.split('\n').filter((line) => line.length);


			// 最初の行と最後の行を消す

			lines.pop();
			lines.shift();


			const r = lines.join('\n').replace(/self/g, 'item');


			const rr = `
				// ${name}
				var item = new RPGObject();
				item.mod(Hack.assets.${name});
				${r}
			`;


			v.body = beautify(rr);

		}

		console.log(file.name);

		console.log(json);





		const blob = new Blob([JSON.stringify(json)], {
			type: 'application/json'
		});


		feeles.saveAs(blob, file.name );



	}



})();
